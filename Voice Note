<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Prototype — Carte interactive (Leaflet)</title>
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-sA+e2kGBrqv3hXvY1qv1gKpO4v0z5ZkG6qYh0f3y+8M=" crossorigin=""/>
  <style>
    :root{--ui-bg:#0f172a;--panel:#0b1220;--accent:#06b6d4;--muted:#94a3b8}
    html,body,#map{height:100%;margin:0}
    body{font-family:Inter,ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,'Helvetica Neue',Arial;color:#e6eef8;background:linear-gradient(180deg,#071029 0%, #02111a 100%)}

    /* Top control panel */
    .panel{position:absolute;left:12px;top:12px;z-index:1000;background:rgba(255,255,255,0.04);backdrop-filter:blur(6px);padding:12px;border-radius:12px;border:1px solid rgba(255,255,255,0.04);min-width:260px;box-shadow:0 6px 20px rgba(2,6,23,.6)}
    .panel h3{margin:0 0 8px 0;font-size:14px;color:#e6f6fb}
    .row{display:flex;gap:8px;align-items:center}
    .filters{display:flex;flex-direction:column;gap:6px;margin-top:8px}
    .btn{background:var(--accent);color:#022;padding:8px 10px;border-radius:8px;border:none;cursor:pointer;font-weight:600}
    .btn.secondary{background:transparent;color:#cfeff6;border:1px solid rgba(255,255,255,0.04)}

    /* Legend */
    .legend{margin-top:8px;font-size:13px;color:var(--muted)}
    .legend .item{display:flex;gap:8px;align-items:center;margin-top:6px}

    /* Pulsing marker */
    .pulse {
      width:18px;height:18px;border-radius:50%;position:relative;
      background:var(--accent);box-shadow:0 0 0 3px rgba(6,182,212,0.14);
    }
    .pulse::after{content:"";position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:18px;height:18px;border-radius:50%;animation:ping 1.6s infinite}
    @keyframes ping{0%{box-shadow:0 0 0 0 rgba(6,182,212,0.45)}100%{box-shadow:0 0 0 22px rgba(6,182,212,0)}}

    /* Small UI at bottom-right */
    .mini{position:absolute;right:12px;bottom:12px;background:rgba(255,255,255,0.03);padding:10px;border-radius:10px;border:1px solid rgba(255,255,255,0.04);z-index:1000}
    .mini button{display:block;margin-bottom:6px;width:140px}

    /* Popup content */
    .popup .title{font-weight:700;margin-bottom:4px}
    .popup .meta{font-size:12px;color:#9fb7c3}

    /* Mobile tweaks */
    @media (max-width:520px){
      .panel{left:8px;right:8px;top:8px;min-width:auto}
    }
  </style>
</head>
<body>

  <div id="map"></div>

  <div class="panel" id="panel">
    <h3>Prototype — Carte interactive</h3>
    <div class="row">
      <button class="btn" id="locateBtn">Se centrer sur moi</button>
      <button class="btn secondary" id="simulateBtn">Simuler déplacement</button>
    </div>

    <div class="filters">
      <label><input type="checkbox" id="showStops" checked> PokéStops</label>
      <label><input type="checkbox" id="showGyms" checked> Arènes</label>
      <label><input type="checkbox" id="showSpawns" checked> Spawns (mobiles)</label>
    </div>

    <div class="legend">
      <div style="font-size:12px;color:#9fb7c3;margin-top:8px">Légende</div>
      <div class="item"><span style="width:18px;height:18px;background:#06b6d4;border-radius:50%;display:inline-block"></span><div style="font-size:13px;color:#e6f6fb">PokéStop</div></div>
      <div class="item"><span style="width:18px;height:18px;background:#fb7185;border-radius:50%;display:inline-block"></span><div style="font-size:13px;color:#e6f6fb">Arène</div></div>
      <div class="item"><span class="pulse"></span><div style="font-size:13px;color:#e6f6fb">Spawn (animé)</div></div>
    </div>
  </div>

  <div class="mini" id="mini">
    <button class="btn secondary" id="addSpawn">Ajouter spawn</button>
    <button class="btn secondary" id="clearSpawns">Vider spawns</button>
    <div style="font-size:12px;color:#9fb7c3;margin-top:6px">État: <span id="status">Init</span></div>
  </div>

  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-o9N1j7kYp3x1k6gk6f3tM0aX0x3u3t7G2v9q+0i0n24=" crossorigin=""></script>
  <script>
    // --- Initialisation ---
    const map = L.map('map', {zoomControl:true, preferCanvas: true}).setView([3.8480,11.5021], 14); // Douala as default

    // OpenStreetMap tiles (no API key)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Layer groups
    const stopsLayer = L.layerGroup().addTo(map);
    const gymsLayer = L.layerGroup().addTo(map);
    const spawnsLayer = L.layerGroup().addTo(map);

    // Utility: create pulsing HTML marker
    function createDivIcon(className, html){
      return L.divIcon({className:className || '', html:html, iconSize:[24,24], iconAnchor:[12,12]});
    }

    // Sample static data (PokéStops & Gyms)
    const sampleStops = [
      {id:1,name:'Marché Akwa',lat:3.8475,lon:11.5030},
      {id:2,name:'Place Bonapriso',lat:3.8460,lon:11.5002},
      {id:3,name:'Université de Douala',lat:3.8508,lon:11.5039}
    ];
    const sampleGyms = [
      {id:1,name:'Arène Centrale',lat:3.8488,lon:11.5012},
      {id:2,name:'Arène Port',lat:3.8441,lon:11.5046}
    ];

    // Add stops & gyms
    function renderStops(){
      stopsLayer.clearLayers();
      sampleStops.forEach(s=>{
        const marker = L.marker([s.lat,s.lon],{icon:createDivIcon('stop-icon',`<div style="width:18px;height:18px;border-radius:50%;background:#06b6d4;border:2px solid rgba(255,255,255,0.06);"></div>`)});
        marker.bindPopup(`<div class='popup'><div class='title'>${s.name}</div><div class='meta'>Type: PokéStop<br/>ID: ${s.id}</div></div>`);
        stopsLayer.addLayer(marker);
      })
    }
    function renderGyms(){
      gymsLayer.clearLayers();
      sampleGyms.forEach(g=>{
        const marker = L.marker([g.lat,g.lon],{icon:createDivIcon('gym-icon',`<div style="width:18px;height:18px;border-radius:4px;background:#fb7185;border:2px solid rgba(255,255,255,0.06);"></div>`)});
        marker.bindPopup(`<div class='popup'><div class='title'>${g.name}</div><div class='meta'>Type: Arène<br/>ID: ${g.id}</div></div>`);
        gymsLayer.addLayer(marker);
      })
    }
    renderStops(); renderGyms();

    // --- User location avatar ---
    const userIcon = createDivIcon('user-icon',`<svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="10" r="3" fill="#fff"/><path d="M12 13c-4 0-6 2-6 5v1h12v-1c0-3-2-5-6-5z" fill="#fff" opacity="0.9"/></svg>`);
    let userMarker = L.marker([3.8480,11.5021],{icon:userIcon,interactive:false}).addTo(map);

    // Try to center on user's real position
    function locateAndCenter(){
      if(!navigator.geolocation) return alert('Géo-localisation non supportée');
      navigator.geolocation.getCurrentPosition(pos=>{
        const lat = pos.coords.latitude; const lon = pos.coords.longitude;
        userMarker.setLatLng([lat,lon]);
        map.setView([lat,lon],16,{animate:true});
        document.getElementById('status').textContent = 'Localisé';
      },err=>{
        console.warn('Position non autorisée ou indisponible',err);
        alert('Impossible d\'accéder à la position. Autorisez la géolocalisation.');
      })
    }
    document.getElementById('locateBtn').addEventListener('click',locateAndCenter);

    // --- Spawns: dynamic points that appear/disappear ---
    let spawnId = 1000;
    const activeSpawns = new Map();

    function addSpawn(lat,lon,ttl=30){
      spawnId +=1; const id = spawnId;
      const el = document.createElement('div'); el.className='pulse';
      const marker = L.marker([lat,lon],{icon:L.divIcon({className:'spawn-marker',html:el.outerHTML,iconAnchor:[9,9]})});
      marker.bindPopup(`<div class='popup'><div class='title'>Spawn #${id}</div><div class='meta'>Expires in ${ttl}s</div></div>`);
      marker.addTo(spawnsLayer);
      activeSpawns.set(id,{marker,expires:Date.now()+ttl*1000});
      document.getElementById('status').textContent = `Spawns: ${activeSpawns.size}`;
      // auto-remove after ttl
      setTimeout(()=>{
        if(activeSpawns.has(id)){
          spawnsLayer.removeLayer(marker);
          activeSpawns.delete(id);
          document.getElementById('status').textContent = `Spawns: ${activeSpawns.size}`;
        }
      }, ttl*1000);
    }

    // Small helper: random nearby coordinate
    function jitterAround(lat,lon,meters){
      const r = meters/111320; // approx degrees
      const u = Math.random(); const v = Math.random();
      const w = r * Math.sqrt(u); const t = 2*Math.PI*v; const dx = w*Math.cos(t); const dy = w*Math.sin(t);
      return [lat+dy, lon+dx];
    }

    // Pre-seed a couple of spawns near center
    addSpawn(3.8477,11.5026,45);
    addSpawn(3.8490,11.5040,25);

    // Manual controls
    document.getElementById('addSpawn').addEventListener('click',()=>{
      const center = map.getCenter(); const pos = jitterAround(center.lat, center.lng, 120);
      addSpawn(pos[0],pos[1], 40 + Math.floor(Math.random()*30));
    });
    document.getElementById('clearSpawns').addEventListener('click',()=>{
      spawnsLayer.clearLayers(); activeSpawns.clear(); document.getElementById('status').textContent = 'Spawns: 0';
    });

    // Simulate live spawn updates (could be replaced by real-time API / sockets)
    let simulate = false; let simulateInterval = null;
    document.getElementById('simulateBtn').addEventListener('click', ()=>{
      simulate = !simulate; document.getElementById('simulateBtn').textContent = simulate ? 'Arrêter simulation' : 'Simuler déplacement';
      if(simulate){
        simulateInterval = setInterval(()=>{
          const center = map.getCenter(); const pos = jitterAround(center.lat, center.lng, 350 + Math.random()*600);
          addSpawn(pos[0],pos[1], 20 + Math.floor(Math.random()*50));
        }, 4000);
      } else {
        clearInterval(simulateInterval); simulateInterval = null;
      }
    });

    // Filters
    document.getElementById('showStops').addEventListener('change',(e)=>{
      if(e.target.checked) map.addLayer(stopsLayer); else map.removeLayer(stopsLayer);
    });
    document.getElementById('showGyms').addEventListener('change',(e)=>{
      if(e.target.checked) map.addLayer(gymsLayer); else map.removeLayer(gymsLayer);
    });
    document.getElementById('showSpawns').addEventListener('change',(e)=>{
      if(e.target.checked) map.addLayer(spawnsLayer); else map.removeLayer(spawnsLayer);
    });

    // Small demo: update popups TTL display per second
    setInterval(()=>{
      activeSpawns.forEach((v,k)=>{
        const remain = Math.max(0, Math.round((v.expires-Date.now())/1000));
        if(v.marker && v.marker.getPopup && v.marker.getPopup()){
          v.marker.getPopup().setContent(`<div class='popup'><div class='title'>Spawn #${k}</div><div class='meta'>Expires in ${remain}s</div></div>`);
        }
      })
    }, 1000);

    // Move user marker smoothly when the device gives updates (watchPosition)
    if(navigator.geolocation && navigator.geolocation.watchPosition){
      navigator.geolocation.watchPosition(pos=>{
        const lat = pos.coords.latitude; const lon = pos.coords.longitude;
        // animate transition
        userMarker.setLatLng([lat,lon]);
      }, err=>{
        // silent
      }, {enableHighAccuracy:true, maximumAge:2000, timeout:5000});
    }

    // Accessibility: keyboard shortcut "c" centers on user
    window.addEventListener('keydown', (e)=>{ if(e.key==='c') locateAndCenter(); });

    // Initial status
    document.getElementById('status').textContent = `Spawns: ${activeSpawns.size}`;

    // Expose a minimal API (for integration with backend later)
    window.ProMap = {
      addSpawnAt: addSpawn,
      clearSpawns: ()=>{spawnsLayer.clearLayers(); activeSpawns.clear();},
      addStop: s=>{ sampleStops.push(s); renderStops(); },
      addGym: g=>{ sampleGyms.push(g); renderGyms(); }
    };

  </script>
</body>
</html>
